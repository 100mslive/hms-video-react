import React, { forwardRef } from 'react';
import { AudioLevelDisplayType } from '../../types';
import { AudioLevelIndicator } from '../AudioLevelIndicators';

export type DisplayShapes = 'circle' | 'rectangle';

export interface VideoClasses {
  /** The actual video element
   *
   */
  video?: string;
  /**
   * Extra styles added when video is circular
   */
  videoCircle?: string;
  /**
   * Extra styles added when video is local stream
   */
  videoLocal?: string;
  /**
   * Extra styles added when objectFit is set to cover
   */
  videoCover?: string;
  /**
   * Extra styles added when objectFir is contain
   */
  videoContain?: string;
}

export interface VideoProps {
  /**
   * Indicates if the stream belongs to the user viewing it. Used in labelling and styling.
   */
  isLocal?: boolean;
  /**
   * Indicates if the stream is generated by a camera, a screen-share or captured from canvas(or other media elements).
   * Used only if the stream is a local stream
   */
  videoSource?: 'screen' | 'camera' | 'canvas';
  /**
   * Indicates whether to show the volume of the stream's audio. Needs audioLevel to display the audio level.
   */
  showAudioLevel?: boolean;
  /**
   * Indicates the volume of the stream as a number.
   * Ignored when showAudioLevel is false.
   */
  audioLevel?: number;
  /**
   * Indicates the fit type of the video inside the container.
   * 'contain' - Video is fit inside the container with it's original aspect-ratio.
   * 'cover' - Video is scaled to cover the largest area within the container while maintaining aspectRatio.
   */
  objectFit: 'contain' | 'cover';
  /**
   * Shape of the video tile.
   * Use 'rectangle' and 'aspect ratio' 1:1 for square.
   */
  displayShape?: DisplayShapes;
  /**
   * Indicates how to display the volume of the stream's audio.
   * Supported types are 'border', 'inline-wave' and 'inline-circle'.
   * Ignored if showAudioLevel is set to false.
   */
  audioLevelDisplayType?: AudioLevelDisplayType;
  /**
   * The color of the audio display
   */
  audioLevelDisplayColor?: string;

  classes?: VideoClasses;
}

export const Video = forwardRef(
  (
    {
      objectFit,
      isLocal,
      videoSource,
      showAudioLevel,
      audioLevel,
      audioLevelDisplayType,
      audioLevelDisplayColor,
      displayShape,
      classes = {
        video: 'h-full w-full',
        videoCircle: 'rounded-full',
        videoLocal: '-scale-x-1',
        videoCover: 'object-cover',
        videoContain: 'object-contain',
      },
    }: VideoProps,
    ref: React.Ref<HTMLVideoElement>,
  ) => {
    return (
      <>
        <video
          muted={isLocal}
          autoPlay
          className={` ${classes.video} 
          ${displayShape === 'circle' ? classes.videoCircle : ''}
          ${isLocal && videoSource === 'camera' ? classes.videoLocal : ''}
          ${objectFit === 'contain' ? classes.videoContain : ''}
          ${objectFit === 'cover' ? classes.videoCover : ''}
        `}
          ref={ref}
        ></video>
        {showAudioLevel && audioLevelDisplayType === 'border' && audioLevel && (
          <AudioLevelIndicator
            type={'border'}
            level={audioLevel}
            displayShape={displayShape}
            classes={{ videoCircle: classes.videoCircle }}
            color={audioLevelDisplayColor}
          />
        )}
      </>
    );
  },
);
